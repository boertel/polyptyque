#!/bin/bash

BORDER=50
BORDER_COLOR="white"
LAYOUT="horizontal"
RATIO=""

DRY_RUN=0
VERBOSE=0
OUTPUT_EXTENSION="png"
TMP_PREFIX="polyptyque-$(date +%s)"
OUTPUT="$TMP_PREFIX.$OUTPUT_EXTENSION"


if [[ $# == 0 ]]; then
    echo "Usage: $(basename $0) [--dry-run] [-b <border size>] [-c <border color>] [-l <layout>] [-o <output file>] -- [file...]"
    echo "Options:"
    echo -e "\t-b, --border SIZE\t\t\tset border size. default: $BORDER"
    echo -e "\t-c, --color COLOR\t\t\tset border color. default: $BORDER_COLOR"
    echo -e "\t-l, --layout horizontal|vertical\tset layout. default: $LAYOUT"
    echo -e "\t-r, --ratio RATIO\t\t\tset ratio. default: <none>"
    echo -e "\t-o, --output PATH\t\t\tset output file. default: ./polyptyque-<timestamp>.$OUTPUT_EXTENSION"
    echo ""
    echo -e "\t--verbose\t\t\t\tdisplay imagemagick underlying commands executed"
    echo -e "\t--dry-run\t\t\t\tdoesn't execute commands"

    exit 1
fi

TMP_DIR=/tmp

function run_cmd {
    if [[ $VERBOSE -ge 1 ]]; then
        echo "$2"
    fi
    if [[ $VERBOSE -ge 2 ]]; then
        echo -e "\t$ $1"
    fi
    if [[ $DRY_RUN -ne 1 ]]; then
        eval "$1"
    fi
}


while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -b | --border)
        shift; BORDER=$1
        ;;
    -c | --color)
        shift; BORDER_COLOR=$1
        ;;
    -l | --layout)
        shift; LAYOUT=$1
        ;;
    -r | --ratio)
        shift; RATIO=$1
        ;;
    -o | --output)
        shift; OUTPUT=$1
        ;;
    -v | --verbose)
        VERBOSE=1
        ;;
    -vv)
        VERBOSE=2
        ;;
    --dry-run )
        VERBOSE=1
        DRY_RUN=1
        ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


MIN_WIDTH=999999
MIN_HEIGHT=999999

for FILE in "$@"; do
    SIZE=$(identify -format '%[EXIF:Orientation] %w %h' 2> /dev/null "$FILE")
    ORIENTATION=$(echo "$SIZE" | cut -d " " -f 1)
    WIDTH_INDEX=2
    HEIGHT_INDEX=3
    if [[ "$ORIENTATION" == "8" ]]; then
        # Portrait
        WIDTH_INDEX=3
        HEIGHT_INDEX=2
    fi
    WIDTH=$(echo "$SIZE" | cut -d " " -f $WIDTH_INDEX)
    HEIGHT=$(echo "$SIZE" | cut -d " " -f $HEIGHT_INDEX)
    if [[ $HEIGHT < $MIN_HEIGHT ]]; then
        MIN_WIDTH=$WIDTH
        MIN_HEIGHT=$HEIGHT
    fi
done

INDEX=0
PICTURES=""
for FILE in "$@"; do
    FILENAME="$TMP_DIR/$TMP_PREFIX-resize-$INDEX.$OUTPUT_EXTENSION"
    (
        CONVERT="convert \"$FILE\" -auto-orient -resize ${MIN_WIDTH}x${MIN_HEIGHT} \"$FILENAME\""
        run_cmd "$CONVERT" "Resizing and updating orientation for $FILE"
    ) &
    PICTURES="$PICTURES $FILENAME"
    INDEX=$(echo "$INDEX + 1" | bc)
done
wait

TMP_FILE="$TMP_DIR/$TMP_PREFIX-tmp.$OUTPUT_EXTENSION"

TILE="-tile x1 "
if [[ "$LAYOUT" == "vertical" ]]; then
    TILE="-tile 1x$INDEX "
fi
MONTAGE="montage$PICTURES $TILE-background '$BORDER_COLOR' -geometry +$BORDER+$BORDER $TMP_FILE"
run_cmd "$MONTAGE" "Merging pictures into one"

RATIO_ARGS=""
if [[ -n "$RATIO" ]]; then
    RATIO_HEIGHT=$(echo "scale=0; $MIN_WIDTH * $RATIO" | bc)
    RATIO_ARGS="-background '$BORDER_COLOR' -resize ${RATIO_WIDTH}x${RATIO_HEIGHT} -gravity center -extent ${RATIO_WIDTH}x${RATIO_HEIGHT} "
fi

CONVERT_BORDER="convert \"$TMP_FILE\" -bordercolor '$BORDER_COLOR' -border $BORDERx$BORDER $RATIO_ARGS\"$OUTPUT\""
run_cmd "$CONVERT_BORDER" "Adding border around the final picture"

run_cmd "rm -rf $PICTURES \"$TMP_FILE\"" "Removing temporary pictures"

echo "$OUTPUT"
